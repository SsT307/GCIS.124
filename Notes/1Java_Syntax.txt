Its an Object-Oriented Programming Language, a compiler, High-Level Language, statically typed (variable must be specified when declared)


/* ------------------------------ Java Bytecode ----------------------------- */
Java source code (.java) --> Java compiler (javac) --> Java Bytecode (.class) --> (depending on the OS)
    --1--> Mac JVM (java) [macOS Specific Instructions] 
    --2--> Windows JVM (java.exe) [Windows ""]
--
Java is platform independent meaning that it runs the same in any platform, it adjusts based on the system by Java virtual machine (interprets Bytecode into machine code)
--

Bytecode is neither high level nor low level language (middle)



Java source code --[Syntax Errors Reported]--> Java Bytecode --> Computer [Runtime Error Reported]

Name of File = Name of Class [CASE SENSITVE]

/* ---------------------------- TYPES OF CLASSES: --------------------------- */
Access modifiers {
    public class = other classes can access this class and this methods
    private class = only mine, only for this class, other classes have no access
    protected class = inside this package and children (package is folder)
    class = this package only
}


/* -------------------------------------------------------------------------- */

static = use this method without creating an object
void = no need to call, doesnt return anything
println = static call

/* -------------------------- TYPES OF ASSIGNMENTS -------------------------- */
- Primitive:
    integers, floats, characters, & booleans
    they are just the memory location where we sort data, no complex
- Reference:
    string, arrays, & other objects



String x = "something" --> Class, meaning it has methods:
    s.toLowerCase() 

String[] --> array of strings
Double[] --> array of doubles

/* ------------------------------ ENCAPSULATION ----------------------------- */
Encapsulates the whole object in it
When creating an object it encapsulates everything in the class from members to constructors
